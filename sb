#!/usr/bin/perl
use IO::Handle;
use IO::Socket::INET;
use Term::ANSIColor;
%abc=(
'a'=>1,
'b'=>2,
'c'=>3,
'd'=>4,
'e'=>5,
'f'=>6,
'g'=>7,
'h'=>8,
'i'=>9,
'j'=>10
);
if ($^O=~/^linux|darwin$/){
    $editor="nano"
} else {
    $editor="edit"
}
@letters=qw(a b c d e f g h i j);
$end_of_file_for_nano="\nCtrl o   - to save result\nCtrl x   - to quit\n";
my $my_ships_killed=0;
my $enemy_ships_killed=0;
my $shoot_y;
my $shoot_x;
my $check_flag;
my $ship_counter=(-1);
my $fm="

\tконсольный сетевой \'Морской Бой\'

СИНТАКСИС

\t sb -s | -c | -h [(-E  | -e) предпочитаемый текстовый редактор]

ОПЦИИ

\t-s\t-запустить хост
\t-c\t-запустить клиент
\t-h\t-вывести это руководство (для linux)
\t-e\t-указать желаемый текстовый редактор
\t-E\t-редактировать \'sb_field\' перед запуском игры

ОПИСАНИЕ

Поле с расположением кораблей находится в файле \'sb_field\', который 
должен лежать в той же папке из которой запускается игра. Если 
\'sb_field\' не существует -\'sb\' создаст его и предложит расставить 
корабли с помощью текстового редактора. По умочанию это \'nano\' для linux 
и \'edit\' для windows. Предпочитаемый редактор можно указать при запуске.

\tНапример :

sb -s -E vim
\tредактировать sb_field с помощью vim затем запустить сервер

sb -с -e notepad
\tзапустить клиент, и если возникнет необходимость редактировать
\tsb_field - использовать notepad


Первая строка \'sb_field\' зарезервирована для IP адреса. 
Клиенту вместо ххх.ххх.ххх.ххх нужно указать адрес хоста.

Палубы кораблей отмечаются \'0\' . Пустые клетки \'-\' .

Количество кораблей:

однопалубных    - 4
двухпалубных    - 3
трехпалубных    - 2
четырехпалубных - 1


Пример файла \'sb_field\':

-------------------------------
127.0.0.1
   a b c d e f g h i j
0 |0 - - - - - - - - -|
1 |- - - - - - - - - -|
2 |- 0 0 0 0 - - - - -|
3 |- - - - - - - - - -|
4 |0 0 0 - - - - 0 - 0|
5 |- - - - - - - - - -|
6 |- 0 - - 0 - - - - -|
7 |- 0 - - - - - - - 0|
8 |- - - - - - 0 - - 0|
9 |- - - 0 0 - 0 - - 0|
--------------------------------


";
my $s1=shift;
if (!($s1 eq '-s' or $s1 eq '-c' or $s1 eq '-h')){info()}
if ($s1 eq '-h'){manual()}
undef ($s2);
my $s2=shift;
if ($s2){
$pref_editor=shift;
if ($s2 eq '-e'){$chto_to=1}
else {
	if ($s2 eq '-E'){
		if (open (FH,"<","sb_field"))	{close (FH);editor()}
		else				{new_field();editor()}
	}
	else {info()}
}
}


if ($pref_editor){$editor=$pref_editor}
while (true) {
	# файл с расстановкой кораблей существует и открывается? если нет -- создать, и запустить редактор
	while (!(open (FH,"<","sb_field"))) {
			print "\ni cann\'t open \'sb_field\'...\nprobably,there is no \'sb_field\' in this folder.\n";
			print "do you want to create it with \'$editor\' ?\ny - yes\nn - no, quit\n>>"; 
			chomp(my $answer=<STDIN>); 
			if ($answer eq 'y'){new_field(); editor(); next} 
				else {	print "try   sb -h   for more information\n";
					exit 0
				}
		}
	# прочесть IP сервера
	$server_name=<FH>;
	chomp ($server_name);
	if ($s1 eq '-c'){
		if (!($server_name=~m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)) {sintax_error(); close (FH); next}
	}
	# здесь хорошо бы его проверить с помощью регулярного выражения, но, видимо, не сейчас :)
	$line=<FH>;  #пропуск строки с буквами
# формирование массива окружённого со всех сторон '0', и запись расположения кораблей в этот массив
	$check_flag=0;
	$array->[0]=[(0,0,0,0,0,0,0,0,0,0,0,0)];
	for ($i=1;$i<11;$i++){
		$line=<FH>;
		$line=~m/[0-9]\s\|[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\s[0|-]\|/ or sintax_error();
		if ($check_flag==1){last}
		@temparr=split (//,$line);
		for ($j=0;$j<12;$j++){
			$sarray->[$i][$j]=0; #обьявление массива противника
			$tj=1+($j*2);
			if ($temparr[$tj] eq '0'){$array->[$i][$j]=1} else {$array->[$i][$j]=0}
		}
		$array->[$i][11]=0;
	}
	$array->[11]=[(0,0,0,0,0,0,0,0,0,0,0,0)];

undef ($error_message);
undef (@counter);
undef (@sa);
#undef ($ship_counter);
$ship_counter=(-1);
if ($check_flag==0){
GOTO:
for ($i=1;$i<11;$i++){
	for ($j=1;$j<11;$j++){
#проверка на касания----------------------------------------------------------------------------------------------------------
		if ($array->[$i][$j] > 0){
		if ($array->[$i+1][$j+1] > 0 or $array->[$i+1][$j-1] > 0){$error_message='ships should not touch each other!'; last GOTO}
		}
#-----------------------------------------------------------------------------------------------------------------------------
		if ($array->[$i][$j] == 1){
			$ship_counter++;
			$temp_j=$j;
			$deck_counter=0;
			while ($array->[$i][$temp_j]){
				$deck_counter++;
				$sa->[$ship_counter][$deck_counter]=100+($i-1)*10+($temp_j-1);
				$sa->[$ship_counter][0]=$deck_counter*(-1);
				$array->[$i][$temp_j]=100+$ship_counter*10+$deck_counter;
				$temp_j++;
			}
			if  ($deck_counter < 2) {
				$temp_i=$i+1;
				$deck_counter=1;
				while ($array->[$temp_i][$j]){
					$deck_counter++;
					$sa->[$ship_counter][$deck_counter]=100+($temp_i-1)*10+($j-1);
					$sa->[$ship_counter][0]=$deck_counter;
					$array->[$temp_i][$j]=100+$ship_counter*10+$deck_counter;
					$temp_i++;
				}
			}
			$counter[$deck_counter]++;
		}
	}

}
}
#проверка количества кораблей--------------------------------------------------------------------------------------------------
if ($check_flag==0){
if (!$error_message){
if (!($counter[1] == 4 and $counter[2] == 3 and $counter[3] == 2 and $counter[4] == 1)){
	$error_message="\nкораблей       |  есть\t|должно быть\n-------------------------------------\nоднопалубных   |   $counter[1]\t|  4\nдвупалубных    |   $counter[2]\t|  3\nтрехпалубных   |   $counter[3]\t|  2\nчетырёхпалубных|   $counter[4]\t|  1\n\n"
}
}
}
#------------------------------------------------------------------------------------------------------------------------------
	close (FH);
	
	if ($error_message){
		display();
		print "$error_message\ndo you want me to start \'$editor\'?\n>>";
		chomp(my $answer=<STDIN>); 
			if ($answer eq 'y'){editor();undef ($error_message); next} 
				else {	print "try   sb -h   for more information\n";
					exit 0
				}	
	}
	if ($check_flag==0){last}
}

if ($s1 eq '-s') {
	server(); 
	$flag='my_move'
}else{
	client();
	$flag='enemy_move'
}

while (1){

display();

if ($flag eq 'my_move') { 
my_move()
}else{
enemy_move()
}

}

sub my_move {
	ENTER:
	while (1){
		print "\nyour move>>";
		$move=<STDIN>;
		chomp ($move);
		$move=~s/ +//;
		$move=~s/ +//;
		$move=~s/ +//;
		if (!($move=~m/^[a-j]\d$/)){print "you should write letter and digit of the field you want to shot\n"; next}
		($shoot_x,$shoot_y)=split(//,$move);
		$shoot_y++;
		$shoot_x=$abc{$shoot_x};
		if ($sarray->[$shoot_y][$shoot_x]!=0){print "may be it is better to shot at empty field ? ;)\n"; next}
		last ENTER
	}
	print $socket "$move\n";
	undef ($answer);
	undef ($p);
	while (!$answer){
		$answer=<$socket>;
		$p++;
		if ($p > 3) {print "\n\aenemy has gone...\n"; exit 0}
	}
	chomp ($answer);
	($a1,$a2)=split(/ /,$answer);
	if ($a1 eq 'hitted'){
		$sarray->[$shoot_y][$shoot_x]=4;
		$ship_health=$a1;
		$flag='my_move';
		return
	}
	if ($a1 eq 'missed'){
		$sarray->[$shoot_y][$shoot_x]=3;
		$ship_health=$a1;
		$flag='enemy_move';
		return
	}
	if ($a1 eq 'killed'){
		$sarray->[$shoot_y][$shoot_x]=4;
		($d->[0][0],$d->[0][1],$d->[0][2],$d->[0][3],$d->[0][4])=split(/,/,$a2);
#print "$a2\n$d->[0][0] , $d->[0][1] , $d->[0][2] , $d->[0][3] , $d->[0][4] ";exit 0;
		@sarray=rips ($d->[0],@sarray);
		$ship_health=$a1;
		$enemy_ships_killed++;
		if ($enemy_ships_killed == 10){
			display ();
			print "\n\aYou Have Won!\n\n"; exit 0
		}
		$flag='my_move';
		return
	}
	print "unexpected error in sub my_move"; exit 0 
}

sub enemy_move{
	print "waiting for the enemy move...\n";

	undef ($move);
	undef ($p);
	while (!$move){
		$move=<$socket>;
		$p++;
		if ($p > 3) {print "\n\aenemy has gone...\n"; exit 0}
	}
	print "\a";
	chomp ($move);

	($shoot_x,$shoot_y)=split(//,$move);
	$shoot_y++;
	$shoot_x=$abc{$shoot_x};
	$last_x=$shoot_x;
	$last_y=$shoot_y;
	$ship_health='missed';
	$flag='my_move';
	if ($array->[$shoot_y][$shoot_x] > 99){
		(undef,$y,$x)=split(//,$array->[$shoot_y][$shoot_x]);
		$array->[$shoot_y][$shoot_x]=4;
		$u=abs($sa->[$y][0]);
		$sa->[$y][$x]+=200;
		$ship_health='killed';
		while ($u){
			if ($sa->[$y][$u] < 200){
				$ship_health='hitted';
				$answer='hitted 3';
				print $socket "$answer\n";
				$flag='enemy_move';
				last
			}
			$u--
		}
	}
	if ($array->[$shoot_y][$shoot_x] == 0){
		$array->[$shoot_y][$shoot_x]=3;
		$answer='missed 0';
		print $socket "$answer\n"
	}
	if ($ship_health eq 'killed') {
		@array=rip($sa->[$y],@array);
		$answer='killed ';
		$answer.=$sa->[$y][0];
		$answer.=',';
		$answer.=$sa->[$y][1];
		$answer.=',';
		$answer.=$sa->[$y][2];
		$answer.=',';
		$answer.=$sa->[$y][3];
		$answer.=',';
		$answer.=$sa->[$y][4];
		print $socket "$answer\n";
		$my_ships_killed++;
		if ($my_ships_killed == 10){
			display ();
			print "\aenemy has won. may be you will next time.\n\n"; exit 0
		}
		$flag='enemy_move'
	}
}

sub rips {
	my @qsa;
	($qsa->[$y], @sarray)=@_;
	if ($qsa->[$y][0] < 0){
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][1]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y-1][$rip_x-1]=3;
	$sarray->[$rip_y][$rip_x-1]=3;
	$sarray->[$rip_y+1][$rip_x-1]=3;
	$u=abs($qsa->[$y][0]);
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][$u]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y-1][$rip_x+1]=3;
	$sarray->[$rip_y][$rip_x+1]=3;
	$sarray->[$rip_y+1][$rip_x+1]=3;
	while ($u) {
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][$u]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y+1][$rip_x]=3;
	$sarray->[$rip_y-1][$rip_x]=3;
	$u--;
	}
	}else{
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][1]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y-1][$rip_x-1]=3;
	$sarray->[$rip_y-1][$rip_x]=3;
	$sarray->[$rip_y-1][$rip_x+1]=3;
	$u=abs($qsa->[$y][0]);
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][$u]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y+1][$rip_x-1]=3;
	$sarray->[$rip_y+1][$rip_x]=3;
	$sarray->[$rip_y+1][$rip_x+1]=3;
	while ($u) {
	(undef,$rip_y,$rip_x)=split(//,$qsa->[$y][$u]);	$rip_y++;$rip_x++;
	$sarray->[$rip_y][$rip_x+1]=3;
	$sarray->[$rip_y][$rip_x-1]=3;
	$u--;
	}
	}
return (@sarray)
}

sub rip {
	($sa->[$y], @array)=@_;
	if ($sa->[$y][0] < 0){
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][1]);	$rip_y++;$rip_x++;
	$array->[$rip_y-1][$rip_x-1]=3;
	$array->[$rip_y][$rip_x-1]=3;
	$array->[$rip_y+1][$rip_x-1]=3;
	$u=abs($sa->[$y][0]);
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][$u]);	$rip_y++;$rip_x++;
	$array->[$rip_y-1][$rip_x+1]=3;
	$array->[$rip_y][$rip_x+1]=3;
	$array->[$rip_y+1][$rip_x+1]=3;
	while ($u) {
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][$u]);	$rip_y++;$rip_x++;
	$array->[$rip_y+1][$rip_x]=3;
	$array->[$rip_y-1][$rip_x]=3;
	$u--;
	}
	}else{
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][1]);	$rip_y++;$rip_x++;
	$array->[$rip_y-1][$rip_x-1]=3;
	$array->[$rip_y-1][$rip_x]=3;
	$array->[$rip_y-1][$rip_x+1]=3;
	$u=abs($sa->[$y][0]);
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][$u]);	$rip_y++;$rip_x++;
	$array->[$rip_y+1][$rip_x-1]=3;
	$array->[$rip_y+1][$rip_x]=3;
	$array->[$rip_y+1][$rip_x+1]=3;
	while ($u) {
	(undef,$rip_y,$rip_x)=split(//,$sa->[$y][$u]);	$rip_y++;$rip_x++;
	$array->[$rip_y][$rip_x+1]=3;
	$array->[$rip_y][$rip_x-1]=3;
	$u--;
	}
	}
return (@array)
}

sub sintax_error {
	$i--;
	if ($^O=~/^linux|darwin$/){system('clear')} else{system('cls')};
	print "something wrong with sb_field at line: ".$i."\ndo you want me to start \'$editor\' ?";
	$answer=<STDIN>; chomp($answer);
	if ($answer eq 'y') {editor(); $check_flag=1}
	else {print "try   sb -h   for more information\n"; exit 0}
	if ($^O=~/^linux|darwin$/){system('clear')} else{system('cls')};
}
sub new_field {
	open (FH,">>","sb_field") or die "something wrong - i cann\'t create the file\n$!\n";
	print FH "xxx.xxx.xxx.xxx\n   a b c d e f g h i j\n0 |- - - - - - - - - -|\n1 |- - - - - - - - - -|\n2 |- - - - - - - - - -|\n3 |- - - - - - - - - -|\n4 |- - - - - - - - - -|\n5 |- - - - - - - - - -|\n6 |- - - - - - - - - -|\n7 |- - - - - - - - - -|\n8 |- - - - - - - - - -|\n9 |- - - - - - - - - -|\n";if ($editor eq 'nano'){print FH $end_of_file_for_nano} close (FH)
}
sub editor {
	if ($pref_editor) {
		@args=("$pref_editor", "sb_field");
		system (@args) == 0 or die "uuuups!\nI can not start \'$pref_editor\', try another editor\n$!\n";
		return 0}
	if ($^O=~/^linux|darwin$/){
		@args=("nano", "sb_field");
		system (@args) == 0 or die "uuuups!\nI can not start \'nano\'\n$!\n"
	}else{
	@args=("edit", "sb_field");
	system (@args) == 0 or die "uuuups! I can not start \'edit\'\n$!\n"
	}
}
sub server {
	$server = IO::Socket::INET->new(	LocalPort	=>	'40008',
						Type		=>	SOCK_STREAM,
						Reuse		=>	1,
						Listen		=>	10)
		or die "--cann't to be server::$!\n";
	display();
	print "waiting for client...\n";
	$socket=$server->accept();
	$socket->autoflush(1);
	print "\aclient has connected\n";
#	$flag=int(rand(2));
#	if ($flag==0){print $socket '1'} else {print $socket '0'}
}

sub client {
	print "trying to connect to   $server_name ...\n";
	$socket=IO::Socket::INET->new	(PeerAddr	=>	$server_name,
					PeerPort	=>	'40008',
					Proto		=>	"tcp",
					Type		=>	SOCK_STREAM)
		or die "can't connect the server, does it exist?\n";
	$socket->autoflush(1);
#	$flag=<$socket>
}

sub info {
	print "usage:\nsb -s | -c | -h [(-E | -e) prefered text editor]\n-s to create a server\n-c to create client\n-h to view full manual\n"; 
	exit 0
}
sub manual {
	if ($^O=~/^linux|darwin$/){
		open (HELPFILE,">>","man_sb");
		print HELPFILE $fm;
		system ('cat man_sb|less') == 0 or die "uuuups! can't start system\n$!\n";
		close (HELPFILE);
		unlink 'man_sb'
	}else{
		print $fm
	}
	exit 0;
}
sub display 
{
if ($^O=~/^linux|darwin$/){
	#display for linux
	system('clear');
	print "   a b c d e f g h i j         a b c d e f g h i j\n";
	for ($y=1;$y<11;$y++)
	{	
		$p=$y-1;
		print "$p  ";
		for ($x=1;$x<11;$x++){
			$background='on_black';
			if ($y==$last_y and $x==$last_x){$background='on_white'}
			if ($array->[$y][$x]>99 or $array->[$y][$x]==1) {print colored ["blue $background"], "0"; print colored ["white on_black"], ' ' } else {if ($array->[$y][$x]==3){print colored ["yellow $background"], '+'; print colored ["white on_black"], ' '  } else {if ($array->[$y][$x]==4){print colored ["red $background"], 'X'; print colored ["white on_black"], ' '} else {print colored ["white on_black"], "-"; print colored ["white on_black"], ' '}}}
		}
		print "     ";
 		print "$p  ";
		for ($x=1;$x<11;$x++){
			$background='on_black';
			if ($sarray->[$y][$x]==3){print colored ["yellow $background"], '+'; print colored ["black on_black"], ' '  } else {if ($sarray->[$y][$x]==4){print colored ["red $background"], 'X'; print colored ["black on_black"], ' '} else {print colored ["white on_black"], '- '}}
		}
		print " \n";
	}
	print "$ship_health\n";

$t=0;
#print (($ship_counter+1)."\n");
#print "#\t0\t1\t2\t3\t4\t5\n";
#while ($t<($ship_counter+1)){
#	print "$t\t$sa->[$t][0]\t$sa->[$t][1]\t$sa->[$t][2]\t$sa->[$t][3]\t$sa->[$t][4]\t$sa->[$t][5]\n";
#	$t++
#}
#print "\n\n0\t1\t2\t3\t4\t5\n";
#print "$counter[0]\t$counter[1]\t$counter[2]\t$counter[3]\t$counter[4]\t$counter[5]\n";
#print "$sa->[5][2]\n";

}else {
	#display for windows
	system('cls');
	print "   a b c d e f g h i j         a b c d e f g h i j\n";
	for ($y=1;$y<11;$y++)
	{	
		$p=$y-1;
		print "$p  ";
		for ($x=1;$x<11;$x++){
			if ($array->[$y][$x]>99) {print '0 '} 
			else {if ($array->[$y][$x]==3){print '  '  } 
			else {if ($array->[$y][$x]==4){print 'X '} 
			else {print '- '}}}
		}
		print "     ";
 		print "$p  ";
		for ($x=1;$x<11;$x++){
			if ($sarray->[$y][$x]==3){print '  '  } 
			else {if ($sarray->[$y][$x]==4){print 'X '} 
			else {print '- '}}
		}
		print " \n";
	}
	print "$ship_health\n";
#	print "$flag\n"; попал или убил
}
}
